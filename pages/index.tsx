// pages/index.tsx
import { GetServerSideProps } from 'next'
import { useState, useEffect } from 'react'
import Search from '../components/search/Search'
import ButtonError from '../components/ButtonError'
import List from '../components/list/List'
import Pagination from '../components/pagination/Pagination'
import Flyout from '../components/flyout/Flyout'
import Loading from '../components/loader/Loading'
import Head from 'next/head'
import { useRouter } from 'next/router'
import { Provider } from 'react-redux'
import { store } from '../store/store'
import { fetchData } from '../utils/fetchData' // You need to define this utility function

interface HomeProps {
  initialResults: []
  initialQuery: string
  isLoading: boolean
  error: string | null
}

export default function Home({ initialResults, initialQuery, isLoading, error }: HomeProps) {
  const [defaultValue, setDefaultValue] = useState<string | 'hello'>('hello')
  const router = useRouter()

  useEffect(() => {
    setDefaultValue(initialQuery || 'hello')
  }, [initialQuery])

  const handleChange = async (value: string) => {
    localStorage.setItem('search', value)
    router.push(
      {
        pathname: router.pathname,
        query: { ...router.query, search: value },
      },
      undefined,
      { shallow: true },
    )
  }

  return (
    <Provider store={store}>
      <Head>
        <title>Create Next App</title>
        <meta name='description' content='Generated by create next app' />
        <meta name='viewport' content='width=device-width, initial-scale=1' />
        <link rel='icon' href='/favicon.ico' />
      </Head>
      <main>
        <div className={`container ${router.query.theme === 'light' ? 'light-mode' : 'dark-mode'}`}>
          <div className='home'>
            <h1>War Heroes</h1>
            <section className='section-search'>
              <Search
                isLoading={isLoading}
                defaultValue={defaultValue || 'hello'}
                onChange={handleChange}
              />
              <ButtonError />
            </section>
            <Flyout />
            <section className='bottom-content'>
              {isLoading && <Loading />}
              {!isLoading && error ? `Sorry, I didn't find anything` : ''}
              <List data={initialResults} isLoading={isLoading} />
              <Pagination data={initialResults} />
            </section>
          </div>
        </div>
      </main>
    </Provider>
  )
}

export const getServerSideProps: GetServerSideProps = async (context) => {
  const query = context.query.search || ''
  let initialResults = []
  let isLoading = true
  let error = null

  try {
    initialResults = await fetchData(query)
    isLoading = false
  } catch (err) {
    error = 'Failed to fetch data'
    isLoading = false
  }

  return {
    props: {
      initialResults,
      initialQuery: query,
      isLoading,
      error,
    },
  }
}
