import ErrorBoundary from '../components/error-boundary/ErrorBoundary'
import Loader from '../components/loader/Loading'
import type { AppProps } from 'next/app'
import { useEffect, useState } from 'react'
import { Provider } from 'react-redux'
import React from 'react'
import { wrapper } from '../store/store'
import { MainLayout } from '../components/MainLayout/MainLayout'
import Head from 'next/head'
import { useRouter } from 'next/router'
import { ThemeProvider } from '../contexts/ThemeProvider'
import './styles/global.css'

export default function App({ Component, pageProps }: AppProps) {
  const { store } = wrapper.useWrappedStore(pageProps)
  const [isLoading, setIsLoading] = useState(false)
  const router = useRouter()

  const start = () => {
    setIsLoading(true)
  }

  const end = () => {
    setTimeout(() => {
      setIsLoading(false)
    }, 2000)
  }

  useEffect(() => {
    router.events.on('routeChangeStart', start)
    router.events.on('routeChangeComplete', end)
    router.events.on('routeChangeError', end)

    return () => {
      router.events.off('routeChangeStart', start)
      router.events.off('routeChangeComplete', end)
      router.events.off('routeChangeError', end)
    }
  }, [router])
  return (
    <Provider store={store}>
      <Head>
        <title>Create Next App</title>
        <meta name='description' content='Generated by create next app' />
        <meta name='viewport' content='width=device-width, initial-scale=1' />
        <link rel='icon' href='/favicon.ico' />
      </Head>
      <ErrorBoundary>
        <ThemeProvider>
          {isLoading ? (
            <div>
              <Loader />
            </div>
          ) : (
            <MainLayout>
              <Component {...pageProps} />
            </MainLayout>
          )}
        </ThemeProvider>
      </ErrorBoundary>
    </Provider>
  )
}
